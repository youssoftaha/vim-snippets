## Main
# main
snippet main
	int main(int argc, const char *argv[]) {
		${0}
		return 0;
	}
# main(void)
snippet mainv
	int main(void) {
		${0}
		return 0;
	}
#main(void)
snippet mainc main function with judge input from in file
	int main(void) {
	#ifndef ONLINE_JUDGE
		freopen("../in", "r", stdin);
	#else
		cin.tie(NULL);
		cin.sync_with_stdio(false);
	#endif
		cout << f(156) << '\n';

		return 0;
	}
## Preprocessor
# #include <...>
snippet incc
	#include <${1:iostream}>
snippet binc
	#include <boost/${1:shared_ptr}.hpp>
##
## STL Collections
# array
snippet array
	array<${1:T}, ${2:N}> ${3};
# vector
snippet vector
	vector<${1:T}> ${2};
# deque
snippet deque
	deque<${1:T}> ${2};
# forward_list
snippet flist
	forward_list<${1:T}> ${2};
# list
snippet list
	list<${1:T}> ${2};
# set
snippet set
	set<${1:T}> ${2};
# map
snippet map
	map<${1:Key}, ${2:T}> ${3};
# multiset
snippet mset
	multiset<${1:T}> ${2};
# multimap
snippet mmap
	multimap<${1:Key}, ${2:T}> ${3};
# unordered_set
snippet uset
	unordered_set<${1:T}> ${2};
# unordered_map
snippet umap
	unordered_map<${1:Key}, ${2:T}> ${3};
# unordered_multiset
snippet umset
	unordered_multiset<${1:T}> ${2};
# unordered_multimap
snippet ummap
	unordered_multimap<${1:Key}, ${2:T}> ${3};
# stack
snippet stack
	stack<${1:T}> ${2};
# queue
snippet queue
	queue<${1:T}> ${2};
# priority_queue
snippet pqueue
	priority_queue<${1:T}> ${2};
## Access Modifiers
# private
snippet pri
	private
# protected
snippet pro
	protected
# public
snippet pub
	public
# friend
snippet fr
	friend
# mutable
snippet mu
	mutable
## Class
# class
snippet cl
	/*! \class $1
	 *  \brief ${3:Brief class description}
	 *
	 *  ${4:Detailed description}
	 */
	class ${1:`vim_snippets#Filename('$1', 'name')`}{
	public:
		$1(${2});
		virtual ~$1();

	protected:
		m_${5}; /*!< ${6:Member description} */
	};
# member function implementation
snippet mfun
	${1:void} ${2:memberFunction}(${3}) {
		${4}
	}
# member function implementation without parameters
snippet dmfun0
	/*! \brief ${4:Brief function description here}
	 *
	 *  ${5:Detailed description}
	 *
	 * \return ${6:Return parameter description}
	 */
	${3:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}() {
		${0}
	}
# member function implementation with one parameter
snippet dmfun1
	/*! \brief ${6:Brief function description here}
	 *
	 *  ${7:Detailed description}
	 *
	 * \param $4 ${8:Parameter description}
	 * \return ${9:Return parameter description}
	 */
	${5:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter}) {
		${0}
	}
# member function implementation with two parameter
snippet dmfun2
	/*! \brief ${8:Brief function description here}
	 *
	 *  ${9:Detailed description}
	 *
	 * \param $4 ${10:Parameter description}
	 * \param $6 ${11:Parameter description}
	 * \return ${12:Return parameter description}
	 */
	${7:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter},${5:Type} ${6:Parameter}) {
		${0}
	}
# namespace
snippet ns
	namespace ${1:`vim_snippets#Filename('', 'my')`}{
		${0}
	} /* namespace $1 */
snippet ans
	namespace{
		${0}
	}
##
## Input/Output
# cout
snippet cout
	cout << ${1} << '\n';
# cin
snippet cin
	cin >> ${1};
##
## Casts
# static
snippet sca
	static_cast<${1:unsigned}>(${2:expr})${3}
# dynamic
snippet dca
	dynamic_cast<${1:unsigned}>(${2:expr})${3}
# reinterpret
snippet rca
	reinterpret_cast<${1:unsigned}>(${2:expr})${3}
# const
snippet cca
	const_cast<${1:unsigned}>(${2:expr})${3}
## Iteration
# for i
snippet for
	for(int ${2:i} = 0; $2 < ${1:count}; ++$2) {
		${3}
	}

# reverse for
snippet rfor
	for(int ${2:i} = ${1:v}.size() -1; $2 > -1; --$2) {
		${3}
	}
# foreach
snippet fore
	for(${1:auto} ${2:i} : ${3:container}) {
		${4}
	}

# iterator
snippet iter
	for(${1:vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}
# auto iterator
snippet itera
	for(auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:cout << *$1 << '\n';}
	}
##
## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}) {${3}};
# lambda (multi-line)
snippet lld
	[${1}](${2}) {
		${3}
	};
# snippets exception
snippet try
	try{

	}
	catch(${1}) {

	}
snippet af auto function
	auto ${1:name}(${2}) -> ${3:void}{
		${0}
	};
snippet sim simple program
	#include <iostream>
	using namespace std;

	int main(void) {
		${0}
		return 0;
	}

snippet com Competition
	#include <bits/stdc++.h>
	#ifndef ONLINE_JUDGE
		#include <dbg.h>
	#endif
	using namespace std;


	int main(void) {
	#ifndef ONLINE_JUDGE
		freopen("../in", "r", stdin);
	#else
		cin.tie(NULL);
		cin.sync_with_stdio(false);
	#endif
		${0}
		return 0;
	}
snippet bnch Chrono execution time
	#include <bits/stdc++.h>
	#ifndef ONLINE_JUDGE
		#include <dbg.h>
	#endif
	using namespace std;

	int main(void) {
	#ifndef ONLINE_JUDGE
		freopen("../in", "r", stdin);
	#else
		cin.tie(NULL);
		cin.sync_with_stdio(false);
	#endif
		auto strt = chrono::high_resolution_clock::now();
		${0}
		auto stp = chrono::high_resolution_clock::now();
		auto dur = chrono::duration_cast<chrono::microseconds>(stp - strt);
		cout << dur.count();
		return 0;
	}
snippet fid:com File head documentation for competitions
	/**
	 * NOTE : ${1}
	 * @description : ${2} 
	 * @complexity : ${3}
	 * @param (${4}) : [${5},${6}] 
	 * @return (${7}) : ${8}
	 */
